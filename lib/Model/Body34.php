<?php
/**
 * Body34
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PAYCOMET REST API
 *
 * PAYCOMET API REST for customers.
 *
 * OpenAPI spec version: 2.21.0
 * Contact: tecnico@paycomet.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Body34 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Body34 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'body_34';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'terminal' => 'int',
'ivr_provider_id' => 'int',
'ivr_station_id' => 'string',
'ivr_merchant_amount' => 'int',
'ivr_merchant_currency' => 'string',
'ivr_merchant_order' => 'string',
'ivr_merchant_language' => 'string',
'ivr_transaction_type' => 'string',
'ivr_merchant_concept' => 'string',
'ivr_subscription_startdate' => 'string',
'ivr_subscription_enddate' => 'string',
'ivr_subscription_periodicity' => 'int',
'ivr_max_retries' => 'int',
'ivr_session_timeout' => 'int',
'ivr_callback_station_timeout' => 'string',
'ivr_callback_station_ok' => 'string',
'ivr_callback_station_ko' => 'string',
'ivr_caller_phone_number' => 'string',
'ivr_provider_data01' => 'string',
'vr_provider_data02' => 'string',
'ivr_provider_data03' => 'string',
'ivr_provider_data04' => 'string',
'ivr_provider_data05' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'terminal' => null,
'ivr_provider_id' => null,
'ivr_station_id' => null,
'ivr_merchant_amount' => null,
'ivr_merchant_currency' => null,
'ivr_merchant_order' => null,
'ivr_merchant_language' => null,
'ivr_transaction_type' => null,
'ivr_merchant_concept' => null,
'ivr_subscription_startdate' => null,
'ivr_subscription_enddate' => null,
'ivr_subscription_periodicity' => null,
'ivr_max_retries' => null,
'ivr_session_timeout' => null,
'ivr_callback_station_timeout' => null,
'ivr_callback_station_ok' => null,
'ivr_callback_station_ko' => null,
'ivr_caller_phone_number' => null,
'ivr_provider_data01' => null,
'vr_provider_data02' => null,
'ivr_provider_data03' => null,
'ivr_provider_data04' => null,
'ivr_provider_data05' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'terminal' => 'terminal',
'ivr_provider_id' => 'ivrProviderId',
'ivr_station_id' => 'ivrStationId',
'ivr_merchant_amount' => 'ivrMerchantAmount',
'ivr_merchant_currency' => 'ivrMerchantCurrency',
'ivr_merchant_order' => 'ivrMerchantOrder',
'ivr_merchant_language' => 'ivrMerchantLanguage',
'ivr_transaction_type' => 'ivrTransactionType',
'ivr_merchant_concept' => 'ivrMerchantConcept',
'ivr_subscription_startdate' => 'ivrSubscriptionStartdate',
'ivr_subscription_enddate' => 'ivrSubscriptionEnddate',
'ivr_subscription_periodicity' => 'ivrSubscriptionPeriodicity',
'ivr_max_retries' => 'ivrMaxRetries',
'ivr_session_timeout' => 'ivrSessionTimeout',
'ivr_callback_station_timeout' => 'ivrCallbackStationTimeout',
'ivr_callback_station_ok' => 'ivrCallbackStationOk',
'ivr_callback_station_ko' => 'ivrCallbackStationKo',
'ivr_caller_phone_number' => 'ivrCallerPhoneNumber',
'ivr_provider_data01' => 'ivrProviderData01',
'vr_provider_data02' => 'vrProviderData02',
'ivr_provider_data03' => 'ivrProviderData03',
'ivr_provider_data04' => 'ivrProviderData04',
'ivr_provider_data05' => 'ivrProviderData05'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'terminal' => 'setTerminal',
'ivr_provider_id' => 'setIvrProviderId',
'ivr_station_id' => 'setIvrStationId',
'ivr_merchant_amount' => 'setIvrMerchantAmount',
'ivr_merchant_currency' => 'setIvrMerchantCurrency',
'ivr_merchant_order' => 'setIvrMerchantOrder',
'ivr_merchant_language' => 'setIvrMerchantLanguage',
'ivr_transaction_type' => 'setIvrTransactionType',
'ivr_merchant_concept' => 'setIvrMerchantConcept',
'ivr_subscription_startdate' => 'setIvrSubscriptionStartdate',
'ivr_subscription_enddate' => 'setIvrSubscriptionEnddate',
'ivr_subscription_periodicity' => 'setIvrSubscriptionPeriodicity',
'ivr_max_retries' => 'setIvrMaxRetries',
'ivr_session_timeout' => 'setIvrSessionTimeout',
'ivr_callback_station_timeout' => 'setIvrCallbackStationTimeout',
'ivr_callback_station_ok' => 'setIvrCallbackStationOk',
'ivr_callback_station_ko' => 'setIvrCallbackStationKo',
'ivr_caller_phone_number' => 'setIvrCallerPhoneNumber',
'ivr_provider_data01' => 'setIvrProviderData01',
'vr_provider_data02' => 'setVrProviderData02',
'ivr_provider_data03' => 'setIvrProviderData03',
'ivr_provider_data04' => 'setIvrProviderData04',
'ivr_provider_data05' => 'setIvrProviderData05'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'terminal' => 'getTerminal',
'ivr_provider_id' => 'getIvrProviderId',
'ivr_station_id' => 'getIvrStationId',
'ivr_merchant_amount' => 'getIvrMerchantAmount',
'ivr_merchant_currency' => 'getIvrMerchantCurrency',
'ivr_merchant_order' => 'getIvrMerchantOrder',
'ivr_merchant_language' => 'getIvrMerchantLanguage',
'ivr_transaction_type' => 'getIvrTransactionType',
'ivr_merchant_concept' => 'getIvrMerchantConcept',
'ivr_subscription_startdate' => 'getIvrSubscriptionStartdate',
'ivr_subscription_enddate' => 'getIvrSubscriptionEnddate',
'ivr_subscription_periodicity' => 'getIvrSubscriptionPeriodicity',
'ivr_max_retries' => 'getIvrMaxRetries',
'ivr_session_timeout' => 'getIvrSessionTimeout',
'ivr_callback_station_timeout' => 'getIvrCallbackStationTimeout',
'ivr_callback_station_ok' => 'getIvrCallbackStationOk',
'ivr_callback_station_ko' => 'getIvrCallbackStationKo',
'ivr_caller_phone_number' => 'getIvrCallerPhoneNumber',
'ivr_provider_data01' => 'getIvrProviderData01',
'vr_provider_data02' => 'getVrProviderData02',
'ivr_provider_data03' => 'getIvrProviderData03',
'ivr_provider_data04' => 'getIvrProviderData04',
'ivr_provider_data05' => 'getIvrProviderData05'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['terminal'] = isset($data['terminal']) ? $data['terminal'] : null;
        $this->container['ivr_provider_id'] = isset($data['ivr_provider_id']) ? $data['ivr_provider_id'] : null;
        $this->container['ivr_station_id'] = isset($data['ivr_station_id']) ? $data['ivr_station_id'] : null;
        $this->container['ivr_merchant_amount'] = isset($data['ivr_merchant_amount']) ? $data['ivr_merchant_amount'] : null;
        $this->container['ivr_merchant_currency'] = isset($data['ivr_merchant_currency']) ? $data['ivr_merchant_currency'] : null;
        $this->container['ivr_merchant_order'] = isset($data['ivr_merchant_order']) ? $data['ivr_merchant_order'] : null;
        $this->container['ivr_merchant_language'] = isset($data['ivr_merchant_language']) ? $data['ivr_merchant_language'] : null;
        $this->container['ivr_transaction_type'] = isset($data['ivr_transaction_type']) ? $data['ivr_transaction_type'] : null;
        $this->container['ivr_merchant_concept'] = isset($data['ivr_merchant_concept']) ? $data['ivr_merchant_concept'] : null;
        $this->container['ivr_subscription_startdate'] = isset($data['ivr_subscription_startdate']) ? $data['ivr_subscription_startdate'] : null;
        $this->container['ivr_subscription_enddate'] = isset($data['ivr_subscription_enddate']) ? $data['ivr_subscription_enddate'] : null;
        $this->container['ivr_subscription_periodicity'] = isset($data['ivr_subscription_periodicity']) ? $data['ivr_subscription_periodicity'] : null;
        $this->container['ivr_max_retries'] = isset($data['ivr_max_retries']) ? $data['ivr_max_retries'] : null;
        $this->container['ivr_session_timeout'] = isset($data['ivr_session_timeout']) ? $data['ivr_session_timeout'] : null;
        $this->container['ivr_callback_station_timeout'] = isset($data['ivr_callback_station_timeout']) ? $data['ivr_callback_station_timeout'] : null;
        $this->container['ivr_callback_station_ok'] = isset($data['ivr_callback_station_ok']) ? $data['ivr_callback_station_ok'] : null;
        $this->container['ivr_callback_station_ko'] = isset($data['ivr_callback_station_ko']) ? $data['ivr_callback_station_ko'] : null;
        $this->container['ivr_caller_phone_number'] = isset($data['ivr_caller_phone_number']) ? $data['ivr_caller_phone_number'] : null;
        $this->container['ivr_provider_data01'] = isset($data['ivr_provider_data01']) ? $data['ivr_provider_data01'] : null;
        $this->container['vr_provider_data02'] = isset($data['vr_provider_data02']) ? $data['vr_provider_data02'] : null;
        $this->container['ivr_provider_data03'] = isset($data['ivr_provider_data03']) ? $data['ivr_provider_data03'] : null;
        $this->container['ivr_provider_data04'] = isset($data['ivr_provider_data04']) ? $data['ivr_provider_data04'] : null;
        $this->container['ivr_provider_data05'] = isset($data['ivr_provider_data05']) ? $data['ivr_provider_data05'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['terminal'] === null) {
            $invalidProperties[] = "'terminal' can't be null";
        }
        if ($this->container['ivr_provider_id'] === null) {
            $invalidProperties[] = "'ivr_provider_id' can't be null";
        }
        if ($this->container['ivr_station_id'] === null) {
            $invalidProperties[] = "'ivr_station_id' can't be null";
        }
        if ($this->container['ivr_merchant_amount'] === null) {
            $invalidProperties[] = "'ivr_merchant_amount' can't be null";
        }
        if ($this->container['ivr_merchant_currency'] === null) {
            $invalidProperties[] = "'ivr_merchant_currency' can't be null";
        }
        if ($this->container['ivr_merchant_order'] === null) {
            $invalidProperties[] = "'ivr_merchant_order' can't be null";
        }
        if ($this->container['ivr_merchant_language'] === null) {
            $invalidProperties[] = "'ivr_merchant_language' can't be null";
        }
        if ($this->container['ivr_transaction_type'] === null) {
            $invalidProperties[] = "'ivr_transaction_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets terminal
     *
     * @return int
     */
    public function getTerminal()
    {
        return $this->container['terminal'];
    }

    /**
     * Sets terminal
     *
     * @param int $terminal Product or terminal Id.
     *
     * @return $this
     */
    public function setTerminal($terminal)
    {
        $this->container['terminal'] = $terminal;

        return $this;
    }

    /**
     * Gets ivr_provider_id
     *
     * @return int
     */
    public function getIvrProviderId()
    {
        return $this->container['ivr_provider_id'];
    }

    /**
     * Sets ivr_provider_id
     *
     * @param int $ivr_provider_id Supplier / IVR integrator code.
     *
     * @return $this
     */
    public function setIvrProviderId($ivr_provider_id)
    {
        $this->container['ivr_provider_id'] = $ivr_provider_id;

        return $this;
    }

    /**
     * Gets ivr_station_id
     *
     * @return string
     */
    public function getIvrStationId()
    {
        return $this->container['ivr_station_id'];
    }

    /**
     * Sets ivr_station_id
     *
     * @param string $ivr_station_id Location identifier.
     *
     * @return $this
     */
    public function setIvrStationId($ivr_station_id)
    {
        $this->container['ivr_station_id'] = $ivr_station_id;

        return $this;
    }

    /**
     * Gets ivr_merchant_amount
     *
     * @return int
     */
    public function getIvrMerchantAmount()
    {
        return $this->container['ivr_merchant_amount'];
    }

    /**
     * Sets ivr_merchant_amount
     *
     * @param int $ivr_merchant_amount Amount of the operation in full format. 1,00 EURO = 100, 4,50 EUROS = 450...
     *
     * @return $this
     */
    public function setIvrMerchantAmount($ivr_merchant_amount)
    {
        $this->container['ivr_merchant_amount'] = $ivr_merchant_amount;

        return $this;
    }

    /**
     * Gets ivr_merchant_currency
     *
     * @return string
     */
    public function getIvrMerchantCurrency()
    {
        return $this->container['ivr_merchant_currency'];
    }

    /**
     * Sets ivr_merchant_currency
     *
     * @param string $ivr_merchant_currency Transaction currency.
     *
     * @return $this
     */
    public function setIvrMerchantCurrency($ivr_merchant_currency)
    {
        $this->container['ivr_merchant_currency'] = $ivr_merchant_currency;

        return $this;
    }

    /**
     * Gets ivr_merchant_order
     *
     * @return string
     */
    public function getIvrMerchantOrder()
    {
        return $this->container['ivr_merchant_order'];
    }

    /**
     * Sets ivr_merchant_order
     *
     * @param string $ivr_merchant_order Operation reference. It must be unique in each valid transaction. IMPORTANT IN CASE OF SUBSCRIPTIONS Do not include the characters “[“ or “]”, they will be used to recognise the business idUser.
     *
     * @return $this
     */
    public function setIvrMerchantOrder($ivr_merchant_order)
    {
        $this->container['ivr_merchant_order'] = $ivr_merchant_order;

        return $this;
    }

    /**
     * Gets ivr_merchant_language
     *
     * @return string
     */
    public function getIvrMerchantLanguage()
    {
        return $this->container['ivr_merchant_language'];
    }

    /**
     * Sets ivr_merchant_language
     *
     * @param string $ivr_merchant_language Language (iso2) in which the IVR phrases will be sent
     *
     * @return $this
     */
    public function setIvrMerchantLanguage($ivr_merchant_language)
    {
        $this->container['ivr_merchant_language'] = $ivr_merchant_language;

        return $this;
    }

    /**
     * Gets ivr_transaction_type
     *
     * @return string
     */
    public function getIvrTransactionType()
    {
        return $this->container['ivr_transaction_type'];
    }

    /**
     * Sets ivr_transaction_type
     *
     * @param string $ivr_transaction_type Possible types 107 Bankstore user registration 1 Authorisation 3 Pre-authorisation 9 Subscription
     *
     * @return $this
     */
    public function setIvrTransactionType($ivr_transaction_type)
    {
        $this->container['ivr_transaction_type'] = $ivr_transaction_type;

        return $this;
    }

    /**
     * Gets ivr_merchant_concept
     *
     * @return string
     */
    public function getIvrMerchantConcept()
    {
        return $this->container['ivr_merchant_concept'];
    }

    /**
     * Sets ivr_merchant_concept
     *
     * @param string $ivr_merchant_concept Operation concept.
     *
     * @return $this
     */
    public function setIvrMerchantConcept($ivr_merchant_concept)
    {
        $this->container['ivr_merchant_concept'] = $ivr_merchant_concept;

        return $this;
    }

    /**
     * Gets ivr_subscription_startdate
     *
     * @return string
     */
    public function getIvrSubscriptionStartdate()
    {
        return $this->container['ivr_subscription_startdate'];
    }

    /**
     * Sets ivr_subscription_startdate
     *
     * @param string $ivr_subscription_startdate Mandatory in subscriptions. Subscription start date.
     *
     * @return $this
     */
    public function setIvrSubscriptionStartdate($ivr_subscription_startdate)
    {
        $this->container['ivr_subscription_startdate'] = $ivr_subscription_startdate;

        return $this;
    }

    /**
     * Gets ivr_subscription_enddate
     *
     * @return string
     */
    public function getIvrSubscriptionEnddate()
    {
        return $this->container['ivr_subscription_enddate'];
    }

    /**
     * Sets ivr_subscription_enddate
     *
     * @param string $ivr_subscription_enddate Mandatory in subscriptions. Subscription end date.
     *
     * @return $this
     */
    public function setIvrSubscriptionEnddate($ivr_subscription_enddate)
    {
        $this->container['ivr_subscription_enddate'] = $ivr_subscription_enddate;

        return $this;
    }

    /**
     * Gets ivr_subscription_periodicity
     *
     * @return int
     */
    public function getIvrSubscriptionPeriodicity()
    {
        return $this->container['ivr_subscription_periodicity'];
    }

    /**
     * Sets ivr_subscription_periodicity
     *
     * @param int $ivr_subscription_periodicity Mandatory in subscriptions. Frequency of the payment from the start date. The number is expressed in Days. It cannot be more than 365 days.
     *
     * @return $this
     */
    public function setIvrSubscriptionPeriodicity($ivr_subscription_periodicity)
    {
        $this->container['ivr_subscription_periodicity'] = $ivr_subscription_periodicity;

        return $this;
    }

    /**
     * Gets ivr_max_retries
     *
     * @return int
     */
    public function getIvrMaxRetries()
    {
        return $this->container['ivr_max_retries'];
    }

    /**
     * Sets ivr_max_retries
     *
     * @param int $ivr_max_retries Number of attempts permitted.
     *
     * @return $this
     */
    public function setIvrMaxRetries($ivr_max_retries)
    {
        $this->container['ivr_max_retries'] = $ivr_max_retries;

        return $this;
    }

    /**
     * Gets ivr_session_timeout
     *
     * @return int
     */
    public function getIvrSessionTimeout()
    {
        return $this->container['ivr_session_timeout'];
    }

    /**
     * Sets ivr_session_timeout
     *
     * @param int $ivr_session_timeout Maximum session time. In seconds.
     *
     * @return $this
     */
    public function setIvrSessionTimeout($ivr_session_timeout)
    {
        $this->container['ivr_session_timeout'] = $ivr_session_timeout;

        return $this;
    }

    /**
     * Gets ivr_callback_station_timeout
     *
     * @return string
     */
    public function getIvrCallbackStationTimeout()
    {
        return $this->container['ivr_callback_station_timeout'];
    }

    /**
     * Sets ivr_callback_station_timeout
     *
     * @param string $ivr_callback_station_timeout Extension of return in case of timeout.
     *
     * @return $this
     */
    public function setIvrCallbackStationTimeout($ivr_callback_station_timeout)
    {
        $this->container['ivr_callback_station_timeout'] = $ivr_callback_station_timeout;

        return $this;
    }

    /**
     * Gets ivr_callback_station_ok
     *
     * @return string
     */
    public function getIvrCallbackStationOk()
    {
        return $this->container['ivr_callback_station_ok'];
    }

    /**
     * Sets ivr_callback_station_ok
     *
     * @param string $ivr_callback_station_ok Extension of return in case of operation OK.
     *
     * @return $this
     */
    public function setIvrCallbackStationOk($ivr_callback_station_ok)
    {
        $this->container['ivr_callback_station_ok'] = $ivr_callback_station_ok;

        return $this;
    }

    /**
     * Gets ivr_callback_station_ko
     *
     * @return string
     */
    public function getIvrCallbackStationKo()
    {
        return $this->container['ivr_callback_station_ko'];
    }

    /**
     * Sets ivr_callback_station_ko
     *
     * @param string $ivr_callback_station_ko Extension of return in case of operation KO.
     *
     * @return $this
     */
    public function setIvrCallbackStationKo($ivr_callback_station_ko)
    {
        $this->container['ivr_callback_station_ko'] = $ivr_callback_station_ko;

        return $this;
    }

    /**
     * Gets ivr_caller_phone_number
     *
     * @return string
     */
    public function getIvrCallerPhoneNumber()
    {
        return $this->container['ivr_caller_phone_number'];
    }

    /**
     * Sets ivr_caller_phone_number
     *
     * @param string $ivr_caller_phone_number Number of incoming call.
     *
     * @return $this
     */
    public function setIvrCallerPhoneNumber($ivr_caller_phone_number)
    {
        $this->container['ivr_caller_phone_number'] = $ivr_caller_phone_number;

        return $this;
    }

    /**
     * Gets ivr_provider_data01
     *
     * @return string
     */
    public function getIvrProviderData01()
    {
        return $this->container['ivr_provider_data01'];
    }

    /**
     * Sets ivr_provider_data01
     *
     * @param string $ivr_provider_data01 Optional field.
     *
     * @return $this
     */
    public function setIvrProviderData01($ivr_provider_data01)
    {
        $this->container['ivr_provider_data01'] = $ivr_provider_data01;

        return $this;
    }

    /**
     * Gets vr_provider_data02
     *
     * @return string
     */
    public function getVrProviderData02()
    {
        return $this->container['vr_provider_data02'];
    }

    /**
     * Sets vr_provider_data02
     *
     * @param string $vr_provider_data02 Optional field.
     *
     * @return $this
     */
    public function setVrProviderData02($vr_provider_data02)
    {
        $this->container['vr_provider_data02'] = $vr_provider_data02;

        return $this;
    }

    /**
     * Gets ivr_provider_data03
     *
     * @return string
     */
    public function getIvrProviderData03()
    {
        return $this->container['ivr_provider_data03'];
    }

    /**
     * Sets ivr_provider_data03
     *
     * @param string $ivr_provider_data03 Optional field.
     *
     * @return $this
     */
    public function setIvrProviderData03($ivr_provider_data03)
    {
        $this->container['ivr_provider_data03'] = $ivr_provider_data03;

        return $this;
    }

    /**
     * Gets ivr_provider_data04
     *
     * @return string
     */
    public function getIvrProviderData04()
    {
        return $this->container['ivr_provider_data04'];
    }

    /**
     * Sets ivr_provider_data04
     *
     * @param string $ivr_provider_data04 Optional field.
     *
     * @return $this
     */
    public function setIvrProviderData04($ivr_provider_data04)
    {
        $this->container['ivr_provider_data04'] = $ivr_provider_data04;

        return $this;
    }

    /**
     * Gets ivr_provider_data05
     *
     * @return string
     */
    public function getIvrProviderData05()
    {
        return $this->container['ivr_provider_data05'];
    }

    /**
     * Sets ivr_provider_data05
     *
     * @param string $ivr_provider_data05 Optional field.
     *
     * @return $this
     */
    public function setIvrProviderData05($ivr_provider_data05)
    {
        $this->container['ivr_provider_data05'] = $ivr_provider_data05;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
