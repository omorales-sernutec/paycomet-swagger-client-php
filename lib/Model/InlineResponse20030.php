<?php
/**
 * InlineResponse20030
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PAYCOMET REST API
 *
 * PAYCOMET API REST for customers.
 *
 * OpenAPI spec version: 2.21.0
 * Contact: tecnico@paycomet.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20030 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20030 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_30';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'error_code' => 'int',
'ivr_response' => 'bool',
'ivr_session_state' => 'int',
'ivr_session_result' => 'int',
'ivr_time_left' => 'int',
'ivr_digit_pan' => 'int',
'ivr_digit_exp' => 'int',
'ivr_digit_cvc' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'error_code' => null,
'ivr_response' => null,
'ivr_session_state' => null,
'ivr_session_result' => null,
'ivr_time_left' => null,
'ivr_digit_pan' => null,
'ivr_digit_exp' => null,
'ivr_digit_cvc' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'error_code' => 'errorCode',
'ivr_response' => 'ivrResponse',
'ivr_session_state' => 'ivrSessionState',
'ivr_session_result' => 'ivrSessionResult',
'ivr_time_left' => 'ivrTimeLeft',
'ivr_digit_pan' => 'ivrDigitPan',
'ivr_digit_exp' => 'ivrDigitExp',
'ivr_digit_cvc' => 'ivrDigitCvc'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'error_code' => 'setErrorCode',
'ivr_response' => 'setIvrResponse',
'ivr_session_state' => 'setIvrSessionState',
'ivr_session_result' => 'setIvrSessionResult',
'ivr_time_left' => 'setIvrTimeLeft',
'ivr_digit_pan' => 'setIvrDigitPan',
'ivr_digit_exp' => 'setIvrDigitExp',
'ivr_digit_cvc' => 'setIvrDigitCvc'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'error_code' => 'getErrorCode',
'ivr_response' => 'getIvrResponse',
'ivr_session_state' => 'getIvrSessionState',
'ivr_session_result' => 'getIvrSessionResult',
'ivr_time_left' => 'getIvrTimeLeft',
'ivr_digit_pan' => 'getIvrDigitPan',
'ivr_digit_exp' => 'getIvrDigitExp',
'ivr_digit_cvc' => 'getIvrDigitCvc'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['error_code'] = isset($data['error_code']) ? $data['error_code'] : null;
        $this->container['ivr_response'] = isset($data['ivr_response']) ? $data['ivr_response'] : null;
        $this->container['ivr_session_state'] = isset($data['ivr_session_state']) ? $data['ivr_session_state'] : null;
        $this->container['ivr_session_result'] = isset($data['ivr_session_result']) ? $data['ivr_session_result'] : null;
        $this->container['ivr_time_left'] = isset($data['ivr_time_left']) ? $data['ivr_time_left'] : null;
        $this->container['ivr_digit_pan'] = isset($data['ivr_digit_pan']) ? $data['ivr_digit_pan'] : null;
        $this->container['ivr_digit_exp'] = isset($data['ivr_digit_exp']) ? $data['ivr_digit_exp'] : null;
        $this->container['ivr_digit_cvc'] = isset($data['ivr_digit_cvc']) ? $data['ivr_digit_cvc'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets error_code
     *
     * @return int
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param int $error_code The error code if something went wrong. 0 means no error.
     *
     * @return $this
     */
    public function setErrorCode($error_code)
    {
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets ivr_response
     *
     * @return bool
     */
    public function getIvrResponse()
    {
        return $this->container['ivr_response'];
    }

    /**
     * Sets ivr_response
     *
     * @param bool $ivr_response Result of the session consultation. 0 -> It will indicate that it was not possible to localise the IVR session. 1 -> The session information have been found and will be returned afterwards.
     *
     * @return $this
     */
    public function setIvrResponse($ivr_response)
    {
        $this->container['ivr_response'] = $ivr_response;

        return $this;
    }

    /**
     * Gets ivr_session_state
     *
     * @return int
     */
    public function getIvrSessionState()
    {
        return $this->container['ivr_session_state'];
    }

    /**
     * Sets ivr_session_state
     *
     * @param int $ivr_session_state The possible values are the following. 0 Waiting. 1 Processing. 2 Finalised. OK. 3 Finalised. KO. 4 Communication time exceeded. 5 Reference not found. 6 Operation cancelled by the agent. 7 Call ended. Waiting for next call
     *
     * @return $this
     */
    public function setIvrSessionState($ivr_session_state)
    {
        $this->container['ivr_session_state'] = $ivr_session_state;

        return $this;
    }

    /**
     * Gets ivr_session_result
     *
     * @return int
     */
    public function getIvrSessionResult()
    {
        return $this->container['ivr_session_result'];
    }

    /**
     * Sets ivr_session_result
     *
     * @param int $ivr_session_result The possible values are the following. 0 No error. 1 Payment operation error. 2 Error entering card data. 3 Error entering expiration month. 4 Error entering expiration year. 5 Error entering CVV
     *
     * @return $this
     */
    public function setIvrSessionResult($ivr_session_result)
    {
        $this->container['ivr_session_result'] = $ivr_session_result;

        return $this;
    }

    /**
     * Gets ivr_time_left
     *
     * @return int
     */
    public function getIvrTimeLeft()
    {
        return $this->container['ivr_time_left'];
    }

    /**
     * Sets ivr_time_left
     *
     * @param int $ivr_time_left Time remaining expressed in seconds for finishing the IVR session. In state 0, the established maximum time will be returned. In state 1 the remaining time will be returned. In states 2, 3, 4 and 5 0 will be returned.
     *
     * @return $this
     */
    public function setIvrTimeLeft($ivr_time_left)
    {
        $this->container['ivr_time_left'] = $ivr_time_left;

        return $this;
    }

    /**
     * Gets ivr_digit_pan
     *
     * @return int
     */
    public function getIvrDigitPan()
    {
        return $this->container['ivr_digit_pan'];
    }

    /**
     * Sets ivr_digit_pan
     *
     * @param int $ivr_digit_pan When the IVR session is underway, the number of digits of the credit card that the client has entered will be returned. 0 will be returned if this information is not available.
     *
     * @return $this
     */
    public function setIvrDigitPan($ivr_digit_pan)
    {
        $this->container['ivr_digit_pan'] = $ivr_digit_pan;

        return $this;
    }

    /**
     * Gets ivr_digit_exp
     *
     * @return int
     */
    public function getIvrDigitExp()
    {
        return $this->container['ivr_digit_exp'];
    }

    /**
     * Sets ivr_digit_exp
     *
     * @param int $ivr_digit_exp When the IVR session is underway, the number of digits of the expiry date that the client has entered will be returned. 0 will be returned if this information is not available.
     *
     * @return $this
     */
    public function setIvrDigitExp($ivr_digit_exp)
    {
        $this->container['ivr_digit_exp'] = $ivr_digit_exp;

        return $this;
    }

    /**
     * Gets ivr_digit_cvc
     *
     * @return int
     */
    public function getIvrDigitCvc()
    {
        return $this->container['ivr_digit_cvc'];
    }

    /**
     * Sets ivr_digit_cvc
     *
     * @param int $ivr_digit_cvc When the IVR session is underway, the number of digits of the CVC2 that the client has entered will be returned. 0 will be shown if this information is not available.
     *
     * @return $this
     */
    public function setIvrDigitCvc($ivr_digit_cvc)
    {
        $this->container['ivr_digit_cvc'] = $ivr_digit_cvc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
