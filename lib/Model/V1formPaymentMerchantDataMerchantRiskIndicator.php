<?php
/**
 * V1formPaymentMerchantDataMerchantRiskIndicator
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PAYCOMET REST API
 *
 * PAYCOMET API REST for customers.
 *
 * OpenAPI spec version: 2.21.0
 * Contact: tecnico@paycomet.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * V1formPaymentMerchantDataMerchantRiskIndicator Class Doc Comment
 *
 * @category Class
 * @description Node with additional information of the business representing the evaluation of the level of risk of fraud for authentication. The delivery of this information is highly recommended
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1formPaymentMerchantDataMerchantRiskIndicator implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1form_payment_merchantData_merchantRiskIndicator';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'delivery_email_address' => 'string',
'delivery_timeframe' => 'string',
'gift_card_amount' => 'string',
'gift_card_count' => 'int',
'gift_card_curr' => 'string',
'pre_order_date' => 'string',
'pre_order_purchase_ind' => 'string',
'reorder_items_ind' => 'string',
'ship_indicator' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'delivery_email_address' => null,
'delivery_timeframe' => null,
'gift_card_amount' => null,
'gift_card_count' => null,
'gift_card_curr' => null,
'pre_order_date' => null,
'pre_order_purchase_ind' => null,
'reorder_items_ind' => null,
'ship_indicator' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'delivery_email_address' => 'deliveryEmailAddress',
'delivery_timeframe' => 'deliveryTimeframe',
'gift_card_amount' => 'giftCardAmount',
'gift_card_count' => 'giftCardCount',
'gift_card_curr' => 'giftCardCurr',
'pre_order_date' => 'preOrderDate',
'pre_order_purchase_ind' => 'preOrderPurchaseInd',
'reorder_items_ind' => 'reorderItemsInd',
'ship_indicator' => 'shipIndicator'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'delivery_email_address' => 'setDeliveryEmailAddress',
'delivery_timeframe' => 'setDeliveryTimeframe',
'gift_card_amount' => 'setGiftCardAmount',
'gift_card_count' => 'setGiftCardCount',
'gift_card_curr' => 'setGiftCardCurr',
'pre_order_date' => 'setPreOrderDate',
'pre_order_purchase_ind' => 'setPreOrderPurchaseInd',
'reorder_items_ind' => 'setReorderItemsInd',
'ship_indicator' => 'setShipIndicator'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'delivery_email_address' => 'getDeliveryEmailAddress',
'delivery_timeframe' => 'getDeliveryTimeframe',
'gift_card_amount' => 'getGiftCardAmount',
'gift_card_count' => 'getGiftCardCount',
'gift_card_curr' => 'getGiftCardCurr',
'pre_order_date' => 'getPreOrderDate',
'pre_order_purchase_ind' => 'getPreOrderPurchaseInd',
'reorder_items_ind' => 'getReorderItemsInd',
'ship_indicator' => 'getShipIndicator'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['delivery_email_address'] = isset($data['delivery_email_address']) ? $data['delivery_email_address'] : null;
        $this->container['delivery_timeframe'] = isset($data['delivery_timeframe']) ? $data['delivery_timeframe'] : null;
        $this->container['gift_card_amount'] = isset($data['gift_card_amount']) ? $data['gift_card_amount'] : null;
        $this->container['gift_card_count'] = isset($data['gift_card_count']) ? $data['gift_card_count'] : null;
        $this->container['gift_card_curr'] = isset($data['gift_card_curr']) ? $data['gift_card_curr'] : null;
        $this->container['pre_order_date'] = isset($data['pre_order_date']) ? $data['pre_order_date'] : null;
        $this->container['pre_order_purchase_ind'] = isset($data['pre_order_purchase_ind']) ? $data['pre_order_purchase_ind'] : null;
        $this->container['reorder_items_ind'] = isset($data['reorder_items_ind']) ? $data['reorder_items_ind'] : null;
        $this->container['ship_indicator'] = isset($data['ship_indicator']) ? $data['ship_indicator'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets delivery_email_address
     *
     * @return string
     */
    public function getDeliveryEmailAddress()
    {
        return $this->container['delivery_email_address'];
    }

    /**
     * Sets delivery_email_address
     *
     * @param string $delivery_email_address For electronic delivery, the email address to which the goods were delivered
     *
     * @return $this
     */
    public function setDeliveryEmailAddress($delivery_email_address)
    {
        $this->container['delivery_email_address'] = $delivery_email_address;

        return $this;
    }

    /**
     * Gets delivery_timeframe
     *
     * @return string
     */
    public function getDeliveryTimeframe()
    {
        return $this->container['delivery_timeframe'];
    }

    /**
     * Sets delivery_timeframe
     *
     * @param string $delivery_timeframe Indicates the delivery period of the goods. Accepted values: 01 = Electronic delivery, 02 = Delivery on the same day, 03 = 24 hour delivery, 04 = Delivery in 2 days or more
     *
     * @return $this
     */
    public function setDeliveryTimeframe($delivery_timeframe)
    {
        $this->container['delivery_timeframe'] = $delivery_timeframe;

        return $this;
    }

    /**
     * Gets gift_card_amount
     *
     * @return string
     */
    public function getGiftCardAmount()
    {
        return $this->container['gift_card_amount'];
    }

    /**
     * Sets gift_card_amount
     *
     * @param string $gift_card_amount For purchases from prepaid cards or gift cards, the total amount of the purchase in major units (for example, USD 123.45 is 123)
     *
     * @return $this
     */
    public function setGiftCardAmount($gift_card_amount)
    {
        $this->container['gift_card_amount'] = $gift_card_amount;

        return $this;
    }

    /**
     * Gets gift_card_count
     *
     * @return int
     */
    public function getGiftCardCount()
    {
        return $this->container['gift_card_count'];
    }

    /**
     * Sets gift_card_count
     *
     * @param int $gift_card_count For purchases from prepaid cards or gift cards, total count of prepaid cards or gift cards/gift codes purchased
     *
     * @return $this
     */
    public function setGiftCardCount($gift_card_count)
    {
        $this->container['gift_card_count'] = $gift_card_count;

        return $this;
    }

    /**
     * Gets gift_card_curr
     *
     * @return string
     */
    public function getGiftCardCurr()
    {
        return $this->container['gift_card_curr'];
    }

    /**
     * Sets gift_card_curr
     *
     * @param string $gift_card_curr For the purchase of prepaid/gift cards, code ISO-4217 of currency of the card
     *
     * @return $this
     */
    public function setGiftCardCurr($gift_card_curr)
    {
        $this->container['gift_card_curr'] = $gift_card_curr;

        return $this;
    }

    /**
     * Gets pre_order_date
     *
     * @return string
     */
    public function getPreOrderDate()
    {
        return $this->container['pre_order_date'];
    }

    /**
     * Sets pre_order_date
     *
     * @param string $pre_order_date For a pre-ordered purchase, the forecast availability date of the goods. Date format: YYYYMMDD
     *
     * @return $this
     */
    public function setPreOrderDate($pre_order_date)
    {
        $this->container['pre_order_date'] = $pre_order_date;

        return $this;
    }

    /**
     * Gets pre_order_purchase_ind
     *
     * @return string
     */
    public function getPreOrderPurchaseInd()
    {
        return $this->container['pre_order_purchase_ind'];
    }

    /**
     * Sets pre_order_purchase_ind
     *
     * @param string $pre_order_purchase_ind Indicates whether the customer makes an order with availability or future launch date. Accepted values: 01 = Goods available, 02 = Future availability
     *
     * @return $this
     */
    public function setPreOrderPurchaseInd($pre_order_purchase_ind)
    {
        $this->container['pre_order_purchase_ind'] = $pre_order_purchase_ind;

        return $this;
    }

    /**
     * Gets reorder_items_ind
     *
     * @return string
     */
    public function getReorderItemsInd()
    {
        return $this->container['reorder_items_ind'];
    }

    /**
     * Sets reorder_items_ind
     *
     * @param string $reorder_items_ind Indicates whether the card is reordering previously purchased goods. Accepted values: 01 = First time purchased, 02 = Previously purchased
     *
     * @return $this
     */
    public function setReorderItemsInd($reorder_items_ind)
    {
        $this->container['reorder_items_ind'] = $reorder_items_ind;

        return $this;
    }

    /**
     * Gets ship_indicator
     *
     * @return string
     */
    public function getShipIndicator()
    {
        return $this->container['ship_indicator'];
    }

    /**
     * Sets ship_indicator
     *
     * @param string $ship_indicator Indicates the delivery method selected for the transaction. Businesses must select the delivery indicator code which more precisely describes the specific transaction of the payment user, not their general commercial activity. If one or more items are included in the sale, use the delivery Indicator code for physical goods, or if all products are digital, use the delivery Indicator code which describes the most expensive item. Accepted values: 01 = Delivery to the invoice address of the customer, 02 = Delivery to another verified address of the client, 03 = Delivery to an address other than that of the customer’s invoice address, 04 = Delivery to the store or collection at premises (the address of the store will be stored in the delivery address fields), 05 = Digital goods (includes online services, electronic gift cards and discount coupons), 06 = Tickets for events and trips, without delivery, 07 = Other (for example, games, digital services without delivery, subscriptions to online services, etc.)
     *
     * @return $this
     */
    public function setShipIndicator($ship_indicator)
    {
        $this->container['ship_indicator'] = $ship_indicator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
