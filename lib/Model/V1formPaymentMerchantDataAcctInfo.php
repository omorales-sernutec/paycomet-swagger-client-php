<?php
/**
 * V1formPaymentMerchantDataAcctInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PAYCOMET REST API
 *
 * PAYCOMET API REST for customers.
 *
 * OpenAPI spec version: 2.21.0
 * Contact: tecnico@paycomet.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * V1formPaymentMerchantDataAcctInfo Class Doc Comment
 *
 * @category Class
 * @description Node with additional information on the user account at the store
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1formPaymentMerchantDataAcctInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1form_payment_merchantData_acctInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ch_acc_age_ind' => 'string',
'ch_acc_change' => 'string',
'ch_acc_change_ind' => 'string',
'ch_acc_date' => 'string',
'ch_acc_pw_change' => 'string',
'ch_acc_pw_change_ind' => 'string',
'nb_purchase_account' => 'int',
'provision_attempts_day' => 'int',
'txn_activity_day' => 'string',
'txn_activity_year' => 'string',
'payment_acc_age' => 'string',
'payment_acc_ind' => 'string',
'ship_address_usage' => 'string',
'ship_address_usage_ind' => 'string',
'ship_name_indicator' => 'string',
'suspicious_acc_activity' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ch_acc_age_ind' => null,
'ch_acc_change' => null,
'ch_acc_change_ind' => null,
'ch_acc_date' => null,
'ch_acc_pw_change' => null,
'ch_acc_pw_change_ind' => null,
'nb_purchase_account' => null,
'provision_attempts_day' => null,
'txn_activity_day' => null,
'txn_activity_year' => null,
'payment_acc_age' => null,
'payment_acc_ind' => null,
'ship_address_usage' => null,
'ship_address_usage_ind' => null,
'ship_name_indicator' => null,
'suspicious_acc_activity' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ch_acc_age_ind' => 'chAccAgeInd',
'ch_acc_change' => 'chAccChange',
'ch_acc_change_ind' => 'chAccChangeInd',
'ch_acc_date' => 'chAccDate',
'ch_acc_pw_change' => 'chAccPwChange',
'ch_acc_pw_change_ind' => 'chAccPwChangeInd',
'nb_purchase_account' => 'nbPurchaseAccount',
'provision_attempts_day' => 'provisionAttemptsDay',
'txn_activity_day' => 'txnActivityDay',
'txn_activity_year' => 'txnActivityYear',
'payment_acc_age' => 'paymentAccAge',
'payment_acc_ind' => 'paymentAccInd',
'ship_address_usage' => 'shipAddressUsage',
'ship_address_usage_ind' => 'shipAddressUsageInd',
'ship_name_indicator' => 'shipNameIndicator',
'suspicious_acc_activity' => 'suspiciousAccActivity'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ch_acc_age_ind' => 'setChAccAgeInd',
'ch_acc_change' => 'setChAccChange',
'ch_acc_change_ind' => 'setChAccChangeInd',
'ch_acc_date' => 'setChAccDate',
'ch_acc_pw_change' => 'setChAccPwChange',
'ch_acc_pw_change_ind' => 'setChAccPwChangeInd',
'nb_purchase_account' => 'setNbPurchaseAccount',
'provision_attempts_day' => 'setProvisionAttemptsDay',
'txn_activity_day' => 'setTxnActivityDay',
'txn_activity_year' => 'setTxnActivityYear',
'payment_acc_age' => 'setPaymentAccAge',
'payment_acc_ind' => 'setPaymentAccInd',
'ship_address_usage' => 'setShipAddressUsage',
'ship_address_usage_ind' => 'setShipAddressUsageInd',
'ship_name_indicator' => 'setShipNameIndicator',
'suspicious_acc_activity' => 'setSuspiciousAccActivity'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ch_acc_age_ind' => 'getChAccAgeInd',
'ch_acc_change' => 'getChAccChange',
'ch_acc_change_ind' => 'getChAccChangeInd',
'ch_acc_date' => 'getChAccDate',
'ch_acc_pw_change' => 'getChAccPwChange',
'ch_acc_pw_change_ind' => 'getChAccPwChangeInd',
'nb_purchase_account' => 'getNbPurchaseAccount',
'provision_attempts_day' => 'getProvisionAttemptsDay',
'txn_activity_day' => 'getTxnActivityDay',
'txn_activity_year' => 'getTxnActivityYear',
'payment_acc_age' => 'getPaymentAccAge',
'payment_acc_ind' => 'getPaymentAccInd',
'ship_address_usage' => 'getShipAddressUsage',
'ship_address_usage_ind' => 'getShipAddressUsageInd',
'ship_name_indicator' => 'getShipNameIndicator',
'suspicious_acc_activity' => 'getSuspiciousAccActivity'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ch_acc_age_ind'] = isset($data['ch_acc_age_ind']) ? $data['ch_acc_age_ind'] : null;
        $this->container['ch_acc_change'] = isset($data['ch_acc_change']) ? $data['ch_acc_change'] : null;
        $this->container['ch_acc_change_ind'] = isset($data['ch_acc_change_ind']) ? $data['ch_acc_change_ind'] : null;
        $this->container['ch_acc_date'] = isset($data['ch_acc_date']) ? $data['ch_acc_date'] : null;
        $this->container['ch_acc_pw_change'] = isset($data['ch_acc_pw_change']) ? $data['ch_acc_pw_change'] : null;
        $this->container['ch_acc_pw_change_ind'] = isset($data['ch_acc_pw_change_ind']) ? $data['ch_acc_pw_change_ind'] : null;
        $this->container['nb_purchase_account'] = isset($data['nb_purchase_account']) ? $data['nb_purchase_account'] : null;
        $this->container['provision_attempts_day'] = isset($data['provision_attempts_day']) ? $data['provision_attempts_day'] : null;
        $this->container['txn_activity_day'] = isset($data['txn_activity_day']) ? $data['txn_activity_day'] : null;
        $this->container['txn_activity_year'] = isset($data['txn_activity_year']) ? $data['txn_activity_year'] : null;
        $this->container['payment_acc_age'] = isset($data['payment_acc_age']) ? $data['payment_acc_age'] : null;
        $this->container['payment_acc_ind'] = isset($data['payment_acc_ind']) ? $data['payment_acc_ind'] : null;
        $this->container['ship_address_usage'] = isset($data['ship_address_usage']) ? $data['ship_address_usage'] : null;
        $this->container['ship_address_usage_ind'] = isset($data['ship_address_usage_ind']) ? $data['ship_address_usage_ind'] : null;
        $this->container['ship_name_indicator'] = isset($data['ship_name_indicator']) ? $data['ship_name_indicator'] : null;
        $this->container['suspicious_acc_activity'] = isset($data['suspicious_acc_activity']) ? $data['suspicious_acc_activity'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ch_acc_age_ind
     *
     * @return string
     */
    public function getChAccAgeInd()
    {
        return $this->container['ch_acc_age_ind'];
    }

    /**
     * Sets ch_acc_age_ind
     *
     * @param string $ch_acc_age_ind Period of time that the customer has had the account at the business. Possible values: 01 = No account (checkout as guest), 02 = Created in this transaction, 03 = Under 30 days, 04 = Between 30 and 60 days, 05 = Over 60 days
     *
     * @return $this
     */
    public function setChAccAgeInd($ch_acc_age_ind)
    {
        $this->container['ch_acc_age_ind'] = $ch_acc_age_ind;

        return $this;
    }

    /**
     * Gets ch_acc_change
     *
     * @return string
     */
    public function getChAccChange()
    {
        return $this->container['ch_acc_change'];
    }

    /**
     * Sets ch_acc_change
     *
     * @param string $ch_acc_change Date on which the user account with the business was last modified, including the invoice or delivery address, the new payment account or new added users. Date format: YYYYMMDD
     *
     * @return $this
     */
    public function setChAccChange($ch_acc_change)
    {
        $this->container['ch_acc_change'] = $ch_acc_change;

        return $this;
    }

    /**
     * Gets ch_acc_change_ind
     *
     * @return string
     */
    public function getChAccChangeInd()
    {
        return $this->container['ch_acc_change_ind'];
    }

    /**
     * Sets ch_acc_change_ind
     *
     * @param string $ch_acc_change_ind Period of time passed since the payment user’s account with the business was last modified, including the invoice or delivery address, the new payment account or new added users. Accepted values: 01 = Modified in this transaction, 02 = Under 30 days, 03 = 30-60 days, 04 = Over 60 days
     *
     * @return $this
     */
    public function setChAccChangeInd($ch_acc_change_ind)
    {
        $this->container['ch_acc_change_ind'] = $ch_acc_change_ind;

        return $this;
    }

    /**
     * Gets ch_acc_date
     *
     * @return string
     */
    public function getChAccDate()
    {
        return $this->container['ch_acc_date'];
    }

    /**
     * Sets ch_acc_date
     *
     * @param string $ch_acc_date Date on which the payment user opened the account with the business. Date format: YYYYMMDD
     *
     * @return $this
     */
    public function setChAccDate($ch_acc_date)
    {
        $this->container['ch_acc_date'] = $ch_acc_date;

        return $this;
    }

    /**
     * Gets ch_acc_pw_change
     *
     * @return string
     */
    public function getChAccPwChange()
    {
        return $this->container['ch_acc_pw_change'];
    }

    /**
     * Sets ch_acc_pw_change
     *
     * @param string $ch_acc_pw_change Date on which the payment user changed the password of their account with the business, or reset their account. Date format: YYYYMMDD
     *
     * @return $this
     */
    public function setChAccPwChange($ch_acc_pw_change)
    {
        $this->container['ch_acc_pw_change'] = $ch_acc_pw_change;

        return $this;
    }

    /**
     * Gets ch_acc_pw_change_ind
     *
     * @return string
     */
    public function getChAccPwChangeInd()
    {
        return $this->container['ch_acc_pw_change_ind'];
    }

    /**
     * Sets ch_acc_pw_change_ind
     *
     * @param string $ch_acc_pw_change_ind Indicates the period of time since the payment user’s account with the business changed its password or was reset. Accepted values: 01 = No changes, 02 = Changed during this transaction, 03 = Under 30 days, 04 = Between 30 and 60 days, 05 = Over 60 days
     *
     * @return $this
     */
    public function setChAccPwChangeInd($ch_acc_pw_change_ind)
    {
        $this->container['ch_acc_pw_change_ind'] = $ch_acc_pw_change_ind;

        return $this;
    }

    /**
     * Gets nb_purchase_account
     *
     * @return int
     */
    public function getNbPurchaseAccount()
    {
        return $this->container['nb_purchase_account'];
    }

    /**
     * Sets nb_purchase_account
     *
     * @param int $nb_purchase_account Number of purchases with this account during the last six months
     *
     * @return $this
     */
    public function setNbPurchaseAccount($nb_purchase_account)
    {
        $this->container['nb_purchase_account'] = $nb_purchase_account;

        return $this;
    }

    /**
     * Gets provision_attempts_day
     *
     * @return int
     */
    public function getProvisionAttemptsDay()
    {
        return $this->container['provision_attempts_day'];
    }

    /**
     * Sets provision_attempts_day
     *
     * @param int $provision_attempts_day Number of attempts to add a card in the last 24 hours
     *
     * @return $this
     */
    public function setProvisionAttemptsDay($provision_attempts_day)
    {
        $this->container['provision_attempts_day'] = $provision_attempts_day;

        return $this;
    }

    /**
     * Gets txn_activity_day
     *
     * @return string
     */
    public function getTxnActivityDay()
    {
        return $this->container['txn_activity_day'];
    }

    /**
     * Sets txn_activity_day
     *
     * @param string $txn_activity_day Number of transactions (successful and abandoned) for this account with the business in all payment accounts in the last 24 hours
     *
     * @return $this
     */
    public function setTxnActivityDay($txn_activity_day)
    {
        $this->container['txn_activity_day'] = $txn_activity_day;

        return $this;
    }

    /**
     * Gets txn_activity_year
     *
     * @return string
     */
    public function getTxnActivityYear()
    {
        return $this->container['txn_activity_year'];
    }

    /**
     * Sets txn_activity_year
     *
     * @param string $txn_activity_year Number of transactions (successful and abandoned) for this account of the payment user with the business in all payment accounts of the last year
     *
     * @return $this
     */
    public function setTxnActivityYear($txn_activity_year)
    {
        $this->container['txn_activity_year'] = $txn_activity_year;

        return $this;
    }

    /**
     * Gets payment_acc_age
     *
     * @return string
     */
    public function getPaymentAccAge()
    {
        return $this->container['payment_acc_age'];
    }

    /**
     * Sets payment_acc_age
     *
     * @param string $payment_acc_age Date on which the payment account was registered on the payment user’s account with the business.
     *
     * @return $this
     */
    public function setPaymentAccAge($payment_acc_age)
    {
        $this->container['payment_acc_age'] = $payment_acc_age;

        return $this;
    }

    /**
     * Gets payment_acc_ind
     *
     * @return string
     */
    public function getPaymentAccInd()
    {
        return $this->container['payment_acc_ind'];
    }

    /**
     * Sets payment_acc_ind
     *
     * @param string $payment_acc_ind Indicates the period of time which the payment account was registered on the payment user’s account with the business. Accepted values: 01 = No account (checkout as guest), 02 = During this transaction, 03 = Under 30 days, 04 = Between 30 and 60 days, 05 = Over 60 days
     *
     * @return $this
     */
    public function setPaymentAccInd($payment_acc_ind)
    {
        $this->container['payment_acc_ind'] = $payment_acc_ind;

        return $this;
    }

    /**
     * Gets ship_address_usage
     *
     * @return string
     */
    public function getShipAddressUsage()
    {
        return $this->container['ship_address_usage'];
    }

    /**
     * Sets ship_address_usage
     *
     * @param string $ship_address_usage Date on which the delivery address used for this transaction was used for the first time with the business. Date format: YYYYMMDD
     *
     * @return $this
     */
    public function setShipAddressUsage($ship_address_usage)
    {
        $this->container['ship_address_usage'] = $ship_address_usage;

        return $this;
    }

    /**
     * Gets ship_address_usage_ind
     *
     * @return string
     */
    public function getShipAddressUsageInd()
    {
        return $this->container['ship_address_usage_ind'];
    }

    /**
     * Sets ship_address_usage_ind
     *
     * @param string $ship_address_usage_ind Indicates when the delivery address used for this transaction was used for the first time with the business. Accepted values: 01 = This transaction, 02 = Under 30 days, 03 = Between 30 and 60 days, 04 = Over 60 days
     *
     * @return $this
     */
    public function setShipAddressUsageInd($ship_address_usage_ind)
    {
        $this->container['ship_address_usage_ind'] = $ship_address_usage_ind;

        return $this;
    }

    /**
     * Gets ship_name_indicator
     *
     * @return string
     */
    public function getShipNameIndicator()
    {
        return $this->container['ship_name_indicator'];
    }

    /**
     * Sets ship_name_indicator
     *
     * @param string $ship_name_indicator Indicates whether the name of the payment user on the account is identical to the delivery name used for this transaction. Accepted values: 01 = Name on the account identical to the delivery name, 02 = Name on the account different from the delivery name
     *
     * @return $this
     */
    public function setShipNameIndicator($ship_name_indicator)
    {
        $this->container['ship_name_indicator'] = $ship_name_indicator;

        return $this;
    }

    /**
     * Gets suspicious_acc_activity
     *
     * @return string
     */
    public function getSuspiciousAccActivity()
    {
        return $this->container['suspicious_acc_activity'];
    }

    /**
     * Sets suspicious_acc_activity
     *
     * @param string $suspicious_acc_activity Indicates whether the business has experienced suspicious activity (including previous fraud) on the payment user’s account. Accepted values: 01 = No record of suspicious activity, 02 = Record of suspicious activity
     *
     * @return $this
     */
    public function setSuspiciousAccActivity($suspicious_acc_activity)
    {
        $this->container['suspicious_acc_activity'] = $suspicious_acc_activity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
